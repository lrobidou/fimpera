# TODO revert the commit that added this line once the project is made publicly available
name: fimpera

on:
  [push]

jobs:
  Linux:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
        # compiler: [g++-8, g++-9, g++-10]
        compiler: [g++-10]
        include:
          # - compiler: g++-8
          #   cxx: g++-8
          #   cc: gcc-8
          # - compiler: g++-9
          #   cxx: g++-9
          #   cc: gcc-9
          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

    name: Linux - ${{ matrix.build_type }} - ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: |
          sudo apt-get install ${{ matrix.compiler }}

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          make -j2

      - name: Test
        shell: bash
        run: cd build && ctest --verbose

      - name: Coverage
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        shell: bash
        run: |
          cd build && make coverage-report

      # - name: Codecov
      #   if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
      #   uses: codecov/codecov-action@v1.0.3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ${{runner.workspace}}/build/coverage_reports.info

  MacOS:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # build_type: [Release, Debug]
        build_type: [Release]

    name: MacOS - ${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: brew install zlib bash

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: cd build && make -j2

      - name: Test
        shell: bash
        run: cd build && ctest --verbose

  Coverage:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Coverage]
        compiler: [g++-10]
        include:
          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

    name: Linux - ${{ matrix.build_type }} - ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: |
          sudo apt-get install ${{ matrix.compiler }} lcov

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          make -j2

      - name: Coverage
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        shell: bash
        run: |
          cd build && make coverage-report

      # - name: Codecov
      #   if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
      #   uses: codecov/codecov-action@v1.0.3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ${{ runner.workspace }}/cpp-app-template/build/coverage_reports.info.filtered
