name: cpp-app #TODO

on:
  [push]

jobs:
  Linux:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
        compiler: [g++-8, g++-9, g++-10]
        include:
          - compiler: g++-8
            cxx: g++-8
            cc: gcc-8
          - compiler: g++-9
            cxx: g++-9
            cc: gcc-9
          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

    name: Linux - ${{ matrix.build_type }} - ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: |
          sudo apt-get install ${{ matrix.compiler }}

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          make -j2

      - name: Test
        shell: bash
        run: cd build && ctest --verbose

      - name: Coverage
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        shell: bash
        run: |
          cd build && make coverage-report

      - name: Codecov
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{runner.workspace}}/build/coverage_reports.info

      - name: Package
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        shell: bash
        run: cd build && make package

      - name: Get tag name
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        id: tag
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Release archive
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        shell: bash
        run: |
          mkdir archive_files
          bash scripts/git-archive-all.sh --format tar.gz ./archive_files/cpp-app-${{ steps.tag.outputs.TAG }}-sources.tar.gz #TODO
          mv build/cpp-app-${{ steps.tag.outputs.TAG }}-bin-Linux.tar.gz archive_files #TODO

      - name: Changelog
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        id: changelog
        shell: bash
        run: |
          r=$(cat docs/changelogs/${{ steps.tag.outputs.TAG }}.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Release
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: Release ${{ steps.tag.outputs.TAG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'archive_files/*'
          file_glob: true
          tag: ${{ github.ref }}
          body: |
            ${{ steps.changelog.outputs.RELEASE_BODY }}
          prerelease: true


  MacOS:
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]

    name: MacOS - ${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: brew install zlib bash

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: cd build && make -j2

      - name: Test
        shell: bash
        run: cd build && ctest --verbose

      - name: Package
        if: matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        shell: bash
        run: cd build && make package

      - name: Get tag name
        if: matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        id: tag
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Release archive
        if: matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        shell: bash
        run: |
          mkdir archive_files
          mv build/cpp-app-${{ steps.tag.outputs.TAG }}-bin-Darwin.tar.gz archive_files #TODO

      - name: Release
        if: matrix.build_type == 'Release' && startsWith(github.event.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: Release ${{ steps.tag.outputs.TAG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'archive_files/*'
          file_glob: true
          tag: ${{ github.ref }}
          prerelease: true

  Coverage:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Coverage]
        compiler: [g++-10]
        include:
          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

    name: Linux - ${{ matrix.build_type }} - ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Dependencies
        run: |
          sudo apt-get install ${{ matrix.compiler }} lcov

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_TESTS=ON

      - name: Build
        shell: bash
        run: |
          cd build
          export CC=$(which ${{ matrix.cc }})
          export CXX=$(which ${{ matrix.cxx }})
          make -j2

      - name: Coverage
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        shell: bash
        run: |
          cd build && make coverage-report

      - name: Codecov
        if: matrix.compiler == 'g++-10' && matrix.build_type == 'Coverage'
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ runner.workspace }}/cpp-app-template/build/coverage_reports.info.filtered
